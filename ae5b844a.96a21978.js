(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{165:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/collision-78e68549d7bdcb5ca12061cd5761cb3a.gif"},77:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return p}));var i=t(2),a=t(6),o=(t(0),t(89)),r={id:"collision",title:"Collision",sidebar_label:"Collision"},l={unversionedId:"features/collision/collision",id:"features/collision/collision",isDocsHomePage:!1,title:"Collision",description:"The MonoGame.Extended.Collisions library contains a 2D grid-based collision system.",source:"@site/docs\\features\\collision\\collision.md",slug:"/features/collision/collision",permalink:"/docs/features/collision/collision",editUrl:"https://github.com/craftworkgames/craftworkgames.github.io/tree/develop/docs/features/collision/collision.md",version:"current",sidebar_label:"Collision",sidebar:"docs",previous:{title:"Animations",permalink:"/docs/features/animations/animations"}},c=[{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[{value:"Setting up the game",id:"setting-up-the-game",children:[]},{value:"Updating the game",id:"updating-the-game",children:[]},{value:"Drawing the final result",id:"drawing-the-final-result",children:[]}]},{value:"Result",id:"result",children:[]}],s={rightToc:c};function p(e){var n=e.components,r=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(i.a)({},s,r,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The MonoGame.Extended.Collisions library contains a 2D grid-based collision system."),Object(o.b)("h2",{id:"installation"},"Installation"),Object(o.b)("p",null,Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://www.nuget.org/packages/MonoGame.Extended.Collisions"}),"MonoGame.Extended.Collisions")," is distributed via a NuGet package. You can add the NuGet package to your C# project through your IDE of choice (Visual Studio, Xamarin Studio, Rider, etc) or through the Command Line Interface (CLI) using the dotnet command."),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{}),"dotnet add MonoGame.Extended.Collisions\n")),Object(o.b)("h2",{id:"usage"},"Usage"),Object(o.b)("p",null,"In this example, we will make a simple sandbox where shapes can move and collide with each other."),Object(o.b)("p",null,"We start by defining an ",Object(o.b)("inlineCode",{parentName:"p"},"IEntity")," interface that inherits ",Object(o.b)("inlineCode",{parentName:"p"},"ICollisionActor"),", so we can insert the entities into our ",Object(o.b)("inlineCode",{parentName:"p"},"CollisionComponent"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-csharp"}),"public interface IEntity : ICollisionActor\n{\n    public void Update(GameTime gameTime);\n    public void Draw(SpriteBatch spriteBatch);\n}\n")),Object(o.b)("p",null,"Next, we define our entity classes"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"OnCollision")," method and the Bounds property come from the ",Object(o.b)("inlineCode",{parentName:"p"},"ICollisionActor")," interface. These will be called by the ",Object(o.b)("inlineCode",{parentName:"p"},"CollisionComponent")),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-csharp"}),"public class CubeEntity : IEntity\n{\n    private readonly Game1 _game;\n    public Vector2 Velocity;\n    public IShapeF Bounds { get; }\n\n    public CubeEntity(Game1 game, RectangleF rectangleF)\n    {\n        _game = game;\n        Bounds = rectangleF;\n        RandomizeVelocity();\n    }\n\n    public virtual void Draw(SpriteBatch spriteBatch)\n    {\n        spriteBatch.DrawRectangle((RectangleF) Bounds, Color.Red, 3);\n    }\n\n    public virtual void Update(GameTime gameTime)\n    {\n        Bounds.Position += Velocity * gameTime.GetElapsedSeconds() * 50;\n    }\n\n    public void OnCollision(CollisionEventArgs collisionInfo)\n    {\n        Velocity.X *= -1;\n        Velocity.Y *= -1;\n        Bounds.Position -= collisionInfo.PenetrationVector;\n    }\n\n    private void RandomizeVelocity()\n    {\n        Velocity.X = _game.Random.Next(-1, 2);\n        Velocity.Y = _game.Random.Next(-1, 2);\n    }\n}\n\npublic class BallEntity : IEntity\n{\n    private readonly Game1 _game;\n    public Vector2 Velocity;\n    public IShapeF Bounds { get; }\n\n    public BallEntity(Game1 game, CircleF circleF)\n    {\n        _game = game;\n        Bounds = circleF;\n        RandomizeVelocity();\n    }\n\n    public void Draw(SpriteBatch spriteBatch)\n    {\n        spriteBatch.DrawCircle((CircleF) Bounds, 8, Color.Red, 3f);\n    }\n\n    public void Update(GameTime gameTime)\n    {\n        Bounds.Position += Velocity * gameTime.GetElapsedSeconds() * 30;\n    }\n\n    public void OnCollision(CollisionEventArgs collisionInfo)\n    {\n        RandomizeVelocity();\n        Bounds.Position -= collisionInfo.PenetrationVector;\n    }\n\n\n    private void RandomizeVelocity()\n    {\n        Velocity.X = _game.Random.Next(-1, 2);\n        Velocity.Y = _game.Random.Next(-1, 2);\n    }\n}\n")),Object(o.b)("h3",{id:"setting-up-the-game"},"Setting up the game"),Object(o.b)("p",null,"First, we define our properties and fields"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-csharp"}),"public readonly Random Random = new Random(Guid.NewGuid().GetHashCode());\nprivate readonly List<IEntity> _entities = new List<IEntity>();\nprivate readonly CollisionComponent _collisionComponent;\nconst int MapWidth = 500;\nconst int MapHeight = 500;\n")),Object(o.b)("p",null,"Then we Initialize our game by creating entities and adding them to the ",Object(o.b)("inlineCode",{parentName:"p"},"CollisionComponent"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-csharp"}),'\npublic Game1()\n{\n    _graphics = new GraphicsDeviceManager(this);\n    _collisionComponent = new CollisionComponent(new RectangleF(0,0, MapWidth, MapHeight));\n\n    Content.RootDirectory = "Content";\n    IsMouseVisible = true;\n}\n\nprotected override void Initialize()\n{\n    base.Initialize();\n    _graphics.PreferredBackBufferHeight = MapHeight;\n    _graphics.PreferredBackBufferWidth = MapWidth;\n    _graphics.ApplyChanges();\n\n    for (var i = 0; i < 50; i++)\n    {\n        var size = Random.Next(20, 40);\n        var position = new Point2(Random.Next(-MapWidth, MapWidth * 2), Random.Next(0, MapHeight));\n        if (i % 2 == 0)\n        {\n            _entities.Add(new BallEntity(this, new CircleF(position, size)));\n        }\n        else\n        {\n            _entities.Add(new CubeEntity(this, new RectangleF(position, new Size2(size, size))));\n        }\n    }\n\n    foreach (IEntity entity in _entities)\n    {\n        _collisionComponent.Insert(entity);\n    }\n}\n')),Object(o.b)("h3",{id:"updating-the-game"},"Updating the game"),Object(o.b)("p",null,"In the ",Object(o.b)("inlineCode",{parentName:"p"},"Update")," method, we update all entities and the ",Object(o.b)("inlineCode",{parentName:"p"},"CollisionComponent"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-csharp"}),"protected override void Update(GameTime gameTime)\n{\n    foreach (IEntity entity in _entities)\n    {\n        entity.Update(gameTime);\n    }\n\n    _collisionComponent.Update(gameTime);\n\n    base.Update(gameTime);\n}\n")),Object(o.b)("h3",{id:"drawing-the-final-result"},"Drawing the final result"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-csharp"}),"protected override void Draw(GameTime gameTime)\n{\n    GraphicsDevice.Clear(Color.CornflowerBlue);\n\n    _spriteBatch.Begin();\n    foreach (IEntity entity in _entities)\n    {\n        entity.Draw(_spriteBatch);\n    }\n\n    _spriteBatch.End();\n\n    base.Draw(gameTime);\n}\n")),Object(o.b)("h2",{id:"result"},"Result"),Object(o.b)("p",null,Object(o.b)("img",{alt:"collision",src:t(165).default})))}p.isMDXComponent=!0},89:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return b}));var i=t(0),a=t.n(i);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=a.a.createContext({}),p=function(e){var n=a.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return a.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},m=a.a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,r=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=p(t),m=i,b=d["".concat(r,".").concat(m)]||d[m]||u[m]||o;return t?a.a.createElement(b,l(l({ref:n},s),{},{components:t})):a.a.createElement(b,l({ref:n},s))}));function b(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var s=2;s<o;s++)r[s]=t[s];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);