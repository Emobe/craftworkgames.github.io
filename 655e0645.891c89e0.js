(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{69:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return p})),t.d(n,"default",(function(){return l}));var a=t(2),r=t(6),o=(t(0),t(91)),i={id:"screen-management",title:"Screen Management",sidebar_label:"Screen Management"},c={unversionedId:"features/screen-management/screen-management",id:"features/screen-management/screen-management",isDocsHomePage:!1,title:"Screen Management",description:"The ScreenManager helps you to split your game into multiple GameScreens with their own Dispose(),",source:"@site/docs/features/screen-management/screen-management.md",slug:"/features/screen-management/screen-management",permalink:"/docs/features/screen-management/screen-management",editUrl:"https://github.com/craftworkgames/craftworkgames.github.io/tree/develop/docs/features/screen-management/screen-management.md",version:"current",sidebar_label:"Screen Management",sidebar:"docs",previous:{title:"Tiled",permalink:"/docs/features/tiled/tiled"},next:{title:"Scene Graphs",permalink:"/docs/features/scene-graphs/scene-graphs"}},p=[{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[{value:"Screen 1",id:"screen-1",children:[]},{value:"Screen 2",id:"screen-2",children:[]}]}],s={rightToc:p};function l(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"ScreenManager")," helps you to split your game into multiple ",Object(o.b)("inlineCode",{parentName:"p"},"GameScreens")," with their own ",Object(o.b)("inlineCode",{parentName:"p"},"Dispose()"),",\n",Object(o.b)("inlineCode",{parentName:"p"},"Initialize()"),",\n",Object(o.b)("inlineCode",{parentName:"p"},"LoadContent()"),",\n",Object(o.b)("inlineCode",{parentName:"p"},"UnloadContent()"),",\n",Object(o.b)("inlineCode",{parentName:"p"},"Update(GameTime gameTime)"),",\nand, ",Object(o.b)("inlineCode",{parentName:"p"},"Draw(GameTime gameTime)")," methods."),Object(o.b)("h2",{id:"installation"},"Installation"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"ScreenManager")," and ",Object(o.b)("inlineCode",{parentName:"p"},"GameScreen")," classes are available in the ",Object(o.b)("inlineCode",{parentName:"p"},"MonoGame.Extended")," library.\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.nuget.org/packages/MonoGame.Extended"}),"MonoGame.Extended")," is distributed via a NuGet package. You can add the NuGet package to your C# project through your IDE of choice (Visual Studio, Xamarin Studio, Rider, etc) or through the Command Line Interface (CLI) using the dotnet command."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{}),"dotnet add package MonoGame.Extended\n")),Object(o.b)("h2",{id:"usage"},"Usage"),Object(o.b)("p",null,"We start by including the ",Object(o.b)("inlineCode",{parentName:"p"},"Screens")," and ",Object(o.b)("inlineCode",{parentName:"p"},"Transitions")," namespaces."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cs"}),"using MonoGame.Extended.Screens;\nusing MonoGame.Extended.Screens.Transitions;\n")),Object(o.b)("p",null,"Next, we implement our GameScreens.\nIn this example, we use 2 GameScreens with a sprite that follows the Cursor."),Object(o.b)("h3",{id:"screen-1"},"Screen 1"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cs"}),'public class MyScreen1 : GameScreen\n{\n    private new Game1 Game => (Game1) base.Game;\n    \n    private Texture2D _logo;\n    private SpriteFont _font;\n    private Vector2 _position = new Vector2(50,50);\n    public MyScreen1(Game1 game) : base(game) { }\n\n    public override void LoadContent()\n    {\n        base.LoadContent();\n        _font = Game.Content.Load<SpriteFont>("font");\n        _logo = Game.Content.Load<Texture2D>("logo-mge");\n    }\n\n    public override void Update(GameTime gameTime)\n    {\n        _position = Vector2.Lerp(_position, Mouse.GetState().Position.ToVector2(), 1f * gameTime.GetElapsedSeconds());\n    }\n\n    public override void Draw(GameTime gameTime)\n    {\n        Game.GraphicsDevice.Clear(new Color(16, 139, 204));\n        Game.SpriteBatch.Begin();\n        Game.SpriteBatch.DrawString(_font, nameof(MyScreen1), new Vector2(10,10), Color.White);\n        Game.SpriteBatch.Draw(_logo, _position, Color.White);\n        Game.SpriteBatch.End();\n    }\n}\n')),Object(o.b)("h3",{id:"screen-2"},"Screen 2"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cs"}),'public class MyScreen2 : GameScreen\n{\n    private new Game1 Game => (Game1)base.Game;\n    private Texture2D _logo;\n    private SpriteFont _font;\n    private Vector2 _position = new Vector2(50, 50);\n    \n    public MyScreen2(Game1 game) : base(game) { }\n\n    public override void LoadContent()\n    {\n        base.LoadContent();\n        _font = Game.Content.Load<SpriteFont>("font");\n        _logo = Game.Content.Load<Texture2D>("logo-mg");\n    }\n\n    public override void Update(GameTime gameTime)\n    {\n        _position = Vector2.Lerp(_position, Mouse.GetState().Position.ToVector2(), 1f * gameTime.GetElapsedSeconds());\n    }\n\n    public override void Draw(GameTime gameTime)\n    {\n        Game.GraphicsDevice.Clear(Color.White);\n        Game.SpriteBatch.Begin();\n        Game.SpriteBatch.DrawString(_font, nameof(MyScreen2), new Vector2(10, 10), Color.Orange);\n        Game.SpriteBatch.Draw(_logo, _position, Color.White);\n        Game.SpriteBatch.End();\n    }\n}\n')),Object(o.b)("p",null,"Next, we define our ",Object(o.b)("inlineCode",{parentName:"p"},"ScreenManger")," in our ",Object(o.b)("inlineCode",{parentName:"p"},"Game")," class."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cs"}),"private readonly ScreenManager _screenManager;\n")),Object(o.b)("p",null,"Which we then assign and register as ",Object(o.b)("inlineCode",{parentName:"p"},"GameComponent")," in the constructor."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cs"}),"_screenManager = new ScreenManager();\nComponents.Add(_screenManager);\n")),Object(o.b)("p",null,"Then we define the following methods to load the screens."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cs"}),"private void LoadScreen1()\n{\n    _screenManager.LoadScreen(new MyScreen1(this), new FadeTransition(GraphicsDevice, Color.Black));\n}\n\nprivate void LoadScreen2()\n{\n    _screenManager.LoadScreen(new MyScreen2(this), new FadeTransition(GraphicsDevice, Color.Black));\n}\n")),Object(o.b)("p",null,"Which we then call from the ",Object(o.b)("inlineCode",{parentName:"p"},"Initialize")," and ",Object(o.b)("inlineCode",{parentName:"p"},"Update")," methods."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cs"}),"protected override void Initialize()\n{\n    base.Initialize();\n    LoadScreen1();\n}\n\nprotected override void Update(GameTime gameTime)\n{\n    KeyboardState keyboardState = Keyboard.GetState();\n    if (keyboardState.IsKeyDown(Keys.Escape))\n        Exit();\n    if (keyboardState.IsKeyDown(Keys.D1))\n    {\n        LoadScreen1();\n    }\n    else if (keyboardState.IsKeyDown(Keys.D2))\n    {\n        LoadScreen2();\n    }\n    base.Update(gameTime);\n}\n")))}l.isMDXComponent=!0},91:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return u}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),l=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},m=function(e){var n=l(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),m=l(t),b=a,u=m["".concat(i,".").concat(b)]||m[b]||d[b]||o;return t?r.a.createElement(u,c(c({ref:n},s),{},{components:t})):r.a.createElement(u,c({ref:n},s))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=b;var c={};for(var p in n)hasOwnProperty.call(n,p)&&(c[p]=n[p]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=t[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);