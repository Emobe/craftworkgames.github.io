(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{71:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return b}));var r=t(2),o=t(6),a=(t(0),t(91)),i={id:"serialization",title:"Serialization",sidebar_label:"Serialization"},l={unversionedId:"features/serialization/serialization",id:"features/serialization/serialization",isDocsHomePage:!1,title:"Serialization",description:"MonoGame.Extended contains various serialization helpers that work with Newtonsoft Json.NET.",source:"@site/docs/features/serialization/serialization.md",slug:"/features/serialization/serialization",permalink:"/docs/features/serialization/serialization",editUrl:"https://github.com/craftworkgames/craftworkgames.github.io/tree/develop/docs/features/serialization/serialization.md",version:"current",sidebar_label:"Serialization",sidebar:"docs",previous:{title:"ContentManager extensions",permalink:"/docs/features/contentManager-extensions/contentManager-extensions"}},c=[{value:"JsonConverter Example",id:"jsonconverter-example",children:[]},{value:"Color JsonConverter",id:"color-jsonconverter",children:[]},{value:"Vector2 JsonConverter",id:"vector2-jsonconverter",children:[]},{value:"NinePatchRegion2D JsonConverter",id:"ninepatchregion2d-jsonconverter",children:[]},{value:"Size2 JsonConverter",id:"size2-jsonconverter",children:[]},{value:"Range JsonConverter",id:"range-jsonconverter",children:[]},{value:"TextureRegion2D JsonConverter",id:"textureregion2d-jsonconverter",children:[]},{value:"Thickness JsonConverter",id:"thickness-jsonconverter",children:[]},{value:"ReadAsMultiDimensional",id:"readasmultidimensional",children:[]}],s={rightToc:c};function b(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"MonoGame.Extended contains various serialization helpers that work with ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"http://www.newtonsoft.com/json/help/html/SerializingJSON.htm"}),"Newtonsoft Json.NET"),"."),Object(a.b)("h1",{id:"json-converters"},"Json Converters"),Object(a.b)("p",null,"The following XNA/MonoGame types have converters:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Color")," via ",Object(a.b)("strong",{parentName:"li"},Object(a.b)("a",Object(r.a)({parentName:"strong"},{href:"#color-jsonconverter"}),"ColorJsonConverter"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Vector2")," via ",Object(a.b)("strong",{parentName:"li"},Object(a.b)("a",Object(r.a)({parentName:"strong"},{href:"#vector2-jsonconverter"}),"Vector2JsonConverter")))),Object(a.b)("p",null,"The following MonoGame.Extended types have converters:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"NinePatchRegion2D")," via ",Object(a.b)("strong",{parentName:"li"},Object(a.b)("a",Object(r.a)({parentName:"strong"},{href:"#ninepatchregion2d-jsonconverter"}),"NinePatchRegion2DJsonConverter"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Size2")," via ",Object(a.b)("strong",{parentName:"li"},Object(a.b)("a",Object(r.a)({parentName:"strong"},{href:"#size2-jsonconverter"}),"Size2JsonConverter"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Range<T>")," via ",Object(a.b)("strong",{parentName:"li"},Object(a.b)("a",Object(r.a)({parentName:"strong"},{href:"#range-jsonconverter"}),"RangeJsonConverter"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"TextureRegion2D")," via ",Object(a.b)("strong",{parentName:"li"},Object(a.b)("a",Object(r.a)({parentName:"strong"},{href:"#textureregion2d-jsonconverter"}),"TextureRegion2DJsonConverter"))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"Thickness")," via ",Object(a.b)("strong",{parentName:"li"},Object(a.b)("a",Object(r.a)({parentName:"strong"},{href:"#thickness-jsonconverter"}),"ThicknessJsonConverter")))),Object(a.b)("h3",{id:"jsonconverter-example"},"JsonConverter Example"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-csharp"}),"using Newtonsoft.Json;\nusing Microsoft.Xna.Framework;\nusing MonoGame.Extended.Serialization;\n\nstruct Thing {\n    public Color BootStrapBlue;\n    public Vector2 Position;\n}\nvar data = @\"{\n    'BootStrapBlue':'#428bca00',\n    'Position':'1.1 4',\n}\";\n\nvar thing = JsonConvert.DeserializeObject<Thing>(data,\n    new ColorJsonConverter(),\n    new Vector2JsonConverter()\n);\n\nthing.BootStrapBlue; // \"{R:66 G:139 B:202 A:0}\"\nthing.Posistion; // \"{X:1.1 Y:4}\"\n")),Object(a.b)("h2",{id:"color-jsonconverter"},"Color JsonConverter"),Object(a.b)("p",null,"ColorJsonConverter tells Newtonsoft Json.NET now to convert string hex values into XNA ",Object(a.b)("inlineCode",{parentName:"p"},"Color")," objects."),Object(a.b)("p",null,"Given the JSON string value"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'"#10203040"\n')),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"Color")," object is created."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-csharp"}),"new Color(16, 32, 48, 64);\n")),Object(a.b)("p",null,"The format is a ",Object(a.b)("inlineCode",{parentName:"p"},"#")," followed by byte hex codes for Red, Green, Blue, and Alpha channels."),Object(a.b)("h2",{id:"vector2-jsonconverter"},"Vector2 JsonConverter"),Object(a.b)("p",null,"Vector2JsonConverter tells Newtonsoft Json.NET how to serialize XNA ",Object(a.b)("inlineCode",{parentName:"p"},"Vector2")," objects."),Object(a.b)("p",null,"Given the JSON string value"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-JSON"}),'"1.2 33"\n')),Object(a.b)("p",null,"A new Vector2 is created."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-csharp"}),"new Vector2(1.2f, 33f);\n")),Object(a.b)("p",null,"The format is ",Object(a.b)("inlineCode",{parentName:"p"},"X Y")," for the x and y components of a 2D vector."),Object(a.b)("h2",{id:"ninepatchregion2d-jsonconverter"},"NinePatchRegion2D JsonConverter"),Object(a.b)("p",null,"NinePatchRegion2DJsonConverter tells Newtonsoft Json.NET how to serialize MonoGame.Extended ",Object(a.b)("inlineCode",{parentName:"p"},"NinePatchRegion2D")," objects."),Object(a.b)("p",null,"Given the JSON object value"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'{\n    "TextureRegion":"Center",\n    "Padding":"1 2 3 4"\n}\n')),Object(a.b)("p",null,"A new ",Object(a.b)("inlineCode",{parentName:"p"},"NinePatchRegion2D")," is created and the TextureRegion is looked up in the TextureRegionService."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-csharp"}),"new NinePatchRegion2D(TextureRegion2D('Center',...), 1, 2, 3, 4)\n")),Object(a.b)("p",null,"The format is not a string value, but a nested JSON object where ",Object(a.b)("inlineCode",{parentName:"p"},"Padding")," is a ",Object(a.b)("inlineCode",{parentName:"p"},"Thickness")," value."),Object(a.b)("h2",{id:"size2-jsonconverter"},"Size2 JsonConverter"),Object(a.b)("p",null,"Size2JsonConverter tells Newtonsoft Json.NET how to serialize MonoGame.Extended ",Object(a.b)("inlineCode",{parentName:"p"},"Size2")," objects."),Object(a.b)("p",null,"Given the JSON string value"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'"10 4"\n')),Object(a.b)("p",null,"A new ",Object(a.b)("inlineCode",{parentName:"p"},"Size2")," object is created.  Understood, good buddy."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-csharp"}),"new Size2(10f, 4f)\n")),Object(a.b)("p",null,"The format is a JSON string containing the Width, and Height values as decimal numbers."),Object(a.b)("h2",{id:"range-jsonconverter"},"Range JsonConverter"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"RangeJsonConverter<T>")," tells Newtonsoft Json.NET how to serialize MonoGame.Extended ",Object(a.b)("inlineCode",{parentName:"p"},"Range<T>")," objects."),Object(a.b)("p",null,"Given the JSON string value"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'"1 9000"\n')),Object(a.b)("p",null,"A new ",Object(a.b)("inlineCode",{parentName:"p"},"Range<T>")," object is created."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-csharp"}),"new Range<int>(1, 9000);\n")),Object(a.b)("p",null,"The format is a JSON string containing one or two values."),Object(a.b)("h2",{id:"textureregion2d-jsonconverter"},"TextureRegion2D JsonConverter"),Object(a.b)("p",null,"TextureRegion2DJsonConverter tells Newtonsoft Json.NET how to serialize MonoGame.Extended ",Object(a.b)("inlineCode",{parentName:"p"},"TextureRegion2D")," objects."),Object(a.b)("p",null,"Given the JSON string value"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'"Center"\n')),Object(a.b)("p",null,"The TextureRegionService is queried with ",Object(a.b)("inlineCode",{parentName:"p"},'GetTextureRegion("Center")')),Object(a.b)("p",null,"The format is a JSON string with the name of the TextureRegion in a TextureAtlas."),Object(a.b)("h2",{id:"thickness-jsonconverter"},"Thickness JsonConverter"),Object(a.b)("p",null,"ThicknessJsonConverter tells Newtonsoft Json.NET how to serialize a MonoGame.Extended ",Object(a.b)("inlineCode",{parentName:"p"},"Thickness")," object."),Object(a.b)("p",null,"Given the JSON string value"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'"1 2 3 4"\n')),Object(a.b)("p",null,"A new ",Object(a.b)("inlineCode",{parentName:"p"},"Thickness")," object is created."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{}),'Thickness.Parse("1 2 3 4")\n')),Object(a.b)("p",null,"The format is a JSON string containing a value to be parsed by Thickness."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},'"1 2 3 4"')," is left:1, top:2, right:3, bottom:4"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},'"2 4"')," is left:2, top:4, right:2, bottom:4"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},'"8"')," is left:8, top:8, right:8, bottom:8"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},'"1,2"')," is left:1, top:2, right:1, top:2")),Object(a.b)("h1",{id:"extensions"},"Extensions"),Object(a.b)("h2",{id:"readasmultidimensional"},"ReadAsMultiDimensional"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"Newtonsoft.Json.JsonReader")," is extended with ",Object(a.b)("inlineCode",{parentName:"p"},"T[] ReadAsMultiDimensional<T>()")),Object(a.b)("p",null,"This allows you to easily create a custom JsonConverter with a list of values."),Object(a.b)("p",null,"For example a list of floats"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-json"}),'"1.1 2.3 4.5 6.1"\n')),Object(a.b)("p",null,"Could be parsed into an array of floats using the following JsonConverter that uses ",Object(a.b)("inlineCode",{parentName:"p"},"ReadAsMultiDimensional")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-csharp"}),'public class PathJsonConverter : JsonConverter\n{\n    public override object ReadJson(JsonReader reader, Type objectType, object value, JsonSerializer serializer)\n    {\n        float[] path = reader.ReadAsMultiDimensional<float>();\n        return path;\n    }\n\n    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)\n    {\n        var path = (float[]) value;\n        writer.WriteValue(string.Join(" ", path));\n    }\n}\n')))}b.isMDXComponent=!0},91:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return O}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=o.a.createContext({}),b=function(e){var n=o.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=b(e.components);return o.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},j=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=b(t),j=r,O=p["".concat(i,".").concat(j)]||p[j]||u[j]||a;return t?o.a.createElement(O,l(l({ref:n},s),{},{components:t})):o.a.createElement(O,l({ref:n},s))}));function O(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=j;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}j.displayName="MDXCreateElement"}}]);