(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{67:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return u})),n.d(t,"default",(function(){return p}));var r=n(2),a=n(6),o=(n(0),n(89)),i={id:"input",title:"Input",sidebar_label:"Input"},s={unversionedId:"features/input/input",id:"features/input/input",isDocsHomePage:!1,title:"Input",description:"The MonoGame.Extended.Input provides extensions on top of the normal input classes.",source:"@site/docs\\features\\input\\input.md",slug:"/features/input/input",permalink:"/docs/features/input/input",editUrl:"https://github.com/craftworkgames/craftworkgames.github.io/tree/develop/docs/features/input/input.md",version:"current",sidebar_label:"Input",sidebar:"docs",previous:{title:"Object Pooling",permalink:"/docs/features/object-pooling/object-pooling"},next:{title:"Graphics",permalink:"/docs/features/graphics/graphics"}},u=[{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[{value:"MouseExtended",id:"mouseextended",children:[]},{value:"KeyboardExtended",id:"keyboardextended",children:[]}]},{value:"InputListeners",id:"inputlisteners",children:[{value:"Usage",id:"usage-1",children:[]}]}],c={rightToc:u};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"MonoGame.Extended.Input")," provides extensions on top of the normal input classes. "),Object(o.b)("h2",{id:"installation"},"Installation"),Object(o.b)("p",null,Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://www.nuget.org/packages/MonoGame.Extended.Input"}),"MonoGame.Extended.Input")," is distributed via a NuGet package. You can add the NuGet package to your C# project through your IDE of choice (Visual Studio, Xamarin Studio, Rider, etc) or through the Command Line Interface (CLI) using the dotnet command."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"dotnet add MonoGame.Extended.Input\n")),Object(o.b)("h2",{id:"usage"},"Usage"),Object(o.b)("h3",{id:"mouseextended"},"MouseExtended"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"MouseExtended")," is an extension of the ",Object(o.b)("inlineCode",{parentName:"p"},"Mouse")," class. The ",Object(o.b)("inlineCode",{parentName:"p"},"MouseStateExtended")," struct, obtained with ",Object(o.b)("inlineCode",{parentName:"p"},"MouseExtended.GetState()")," provides useful utilities such as ",Object(o.b)("inlineCode",{parentName:"p"},"WasButtonJustDown()")," and ",Object(o.b)("inlineCode",{parentName:"p"},"WasButtonJustUp()")," by keeping track of the previous ",Object(o.b)("inlineCode",{parentName:"p"},"MouseState"),"."),Object(o.b)("h3",{id:"keyboardextended"},"KeyboardExtended"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"KeyboardExtended")," is an extension of the ",Object(o.b)("inlineCode",{parentName:"p"},"Keyboard")," class. The ",Object(o.b)("inlineCode",{parentName:"p"},"KeyboardStateExtended")," struct, obtained with ",Object(o.b)("inlineCode",{parentName:"p"},"KeyboardExtended.GetState()")," provides useful utilities such as ",Object(o.b)("inlineCode",{parentName:"p"},"WasAnyKeyJustDown()"),", ",Object(o.b)("inlineCode",{parentName:"p"},"WasKeyJustDown()")," and ",Object(o.b)("inlineCode",{parentName:"p"},"WasKeyJustUp()")," by keeping track of the previous ",Object(o.b)("inlineCode",{parentName:"p"},"KeyboardState"),"."),Object(o.b)("h2",{id:"inputlisteners"},"InputListeners"),Object(o.b)("p",null," ",Object(o.b)("inlineCode",{parentName:"p"},"Listener")," classes have events you can use to subscribe to input events, instead of having to poll for input changes."),Object(o.b)("h3",{id:"usage-1"},"Usage"),Object(o.b)("p",null,"We start by including the required namespace."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cs"}),"using MonoGame.Extended.Input.InputListeners;\n")),Object(o.b)("p",null,"Next, we declare our ",Object(o.b)("inlineCode",{parentName:"p"},"InputListener")," fields"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cs"}),"private readonly TouchListener _touchListener;\nprivate readonly GamePadListener _gamePadListener;\nprivate readonly KeyboardListener _keyboardListener;\nprivate readonly MouseListener _mouseListener;\n")),Object(o.b)("p",null,"You can manually call the ",Object(o.b)("inlineCode",{parentName:"p"},"Update")," method of the ",Object(o.b)("inlineCode",{parentName:"p"},"Listeners"),", but you can also use ",Object(o.b)("inlineCode",{parentName:"p"},"InputListenerComponent")," this this."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cs"}),"_keyboardListener = new KeyboardListener();\n_gamePadListener = new GamePadListener();\n_mouseListener = new MouseListener();\n_touchListener = new TouchListener();\n\nComponents.Add(new InputListenerComponent(this, _keyboardListener, _gamePadListener, _mouseListener, _touchListener));\n")),Object(o.b)("p",null,"Finaly, we subscribe to the events of the ",Object(o.b)("inlineCode",{parentName:"p"},"InputListeners")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-cs"}),'_mouseListener.MouseClicked += (sender, args) => { Window.Title = $"Mouse {args.Button} Clicked"; };\n_keyboardListener.KeyPressed += (sender, args) => { Window.Title = $"Key {args.Key} Pressed"; };\n_gamePadListener.ButtonDown +=  (sender, args) => { Window.Title = $"Key {args.Button} Down"; };\n_touchListener.TouchStarted +=  (sender, args) => { Window.Title = $"Touched"; };\n')))}p.isMDXComponent=!0},89:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),p=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),d=p(n),b=r,m=d["".concat(i,".").concat(b)]||d[b]||l[b]||o;return n?a.a.createElement(m,s(s({ref:t},c),{},{components:n})):a.a.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=b;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);