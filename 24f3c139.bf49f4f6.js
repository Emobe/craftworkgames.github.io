(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{115:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/tiled-logo-15cece4c4c24263ef65eb0399df18c10.png"},116:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/files/assets-6a3b3a06d9df585805d29f6f45628bcd.zip"},59:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return d})),n.d(t,"default",(function(){return p}));var a=n(2),i=n(6),r=(n(0),n(80)),c={id:"tiled",title:"Tiled",sidebar_label:"Tiled"},o={unversionedId:"features/tiled/tiled",id:"features/tiled/tiled",isDocsHomePage:!1,title:"Tiled",description:"Tiled Logo",source:"@site/docs/features/tiled/tiled.md",slug:"/features/tiled/tiled",permalink:"/docs/features/tiled/tiled",editUrl:"https://github.com/craftworkgames/craftworkgames.github.io/tree/develop/docs/features/tiled/tiled.md",version:"current",sidebar_label:"Tiled",sidebar:"docs",previous:{title:"Tweening",permalink:"/docs/features/tweening/tweening"}},d=[{value:"Installation",id:"installation",children:[{value:"Content Pipeline",id:"content-pipeline",children:[]},{value:"NuGet",id:"nuget",children:[]}]},{value:"Example",id:"example",children:[{value:"Usage",id:"usage",children:[]},{value:"Adding a Camera",id:"adding-a-camera",children:[]}]}],l={rightToc:d};function p(e){var t=e.components,c=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},l,c,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.mapeditor.org/"}),Object(r.b)("img",{alt:"Tiled Logo",src:n(115).default}))),Object(r.b)("h1",{id:"tiled"},"Tiled"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"MonoGame.Extended.Tiled")," library allows you to load and render maps files (",Object(r.b)("inlineCode",{parentName:"p"},".tmx"),") created with the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"http://www.mapeditor.org/"}),"Tiled Map Editor"),"."),Object(r.b)("h2",{id:"installation"},"Installation"),Object(r.b)("h3",{id:"content-pipeline"},"Content Pipeline"),Object(r.b)("p",null,"To load a Tiled map you first to compile it using the Content Pipeline. If you have not setup the Content Pipeline with ",Object(r.b)("inlineCode",{parentName:"p"},"MonoGame.Extended")," yet see the instructions on how to install the Content Pipeline in the ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/getting-started/installation"}),"getting started section"),"."),Object(r.b)("h3",{id:"nuget"},"NuGet"),Object(r.b)("p",null,Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.nuget.org/packages/MonoGame.Extended.Tiled/"}),"MonoGame.Extended.Tiled")," is distributed via a NuGet package. You can add the NuGet package to your C# project through your IDE of choice (Visual Studio, Xamarin Studio, Rider, etc) or through the Command Line Interface (CLI) using the dotnet command."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"dotnet add package MonoGame.Extended.Tiled\n")),Object(r.b)("h2",{id:"example"},"Example"),Object(r.b)("p",null,"The assets used in this example can be downloaded ",Object(r.b)("a",{target:"_blank",href:n(116).default},"here")),Object(r.b)("h3",{id:"usage"},"Usage"),Object(r.b)("p",null,"We start by including the ",Object(r.b)("inlineCode",{parentName:"p"},"Tiled")," namespaces."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cs"}),"using MonoGame.Extended.Tiled;\nusing MonoGame.Extended.Tiled.Renderers;\n")),Object(r.b)("p",null,"Next, we define our ",Object(r.b)("inlineCode",{parentName:"p"},"Tiledmap")," and ",Object(r.b)("inlineCode",{parentName:"p"},"TiledMapRenderer")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cs"}),"TiledMap _tiledMap;\nTiledMapRenderer _tiledMapRenderer;\n")),Object(r.b)("p",null,"Which we then initialize in the LoadContent function."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cs"}),'protected override void LoadContent()\n{\n    _tiledMap = Content.Load<TiledMap>("samplemap");\n    _tiledMapRenderer = new TiledMapRenderer(GraphicsDevice, _tiledMap);\n\n    _spriteBatch = new SpriteBatch(GraphicsDevice);\n}\n')),Object(r.b)("p",null,"Finally we render and update the map by calling ",Object(r.b)("inlineCode",{parentName:"p"},"mapRenderer.Update()")," and ",Object(r.b)("inlineCode",{parentName:"p"},"mapRenderer.Draw()")," respectively."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cs"}),"protected override void Update(GameTime gameTime)\n{\n    _tiledMapRenderer.Update(gameTime);\n}\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cs"}),"protected override void Draw(GameTime gameTime)\n{\n    GraphicsDevice.Clear(Color.Black);\n    \n    _tiledMapRenderer.Draw();\n}\n")),Object(r.b)("h3",{id:"adding-a-camera"},"Adding a Camera"),Object(r.b)("p",null,"The game now renders the ",Object(r.b)("inlineCode",{parentName:"p"},"TiledMap"),". The next step is to navigate through the map with a ",Object(r.b)("inlineCode",{parentName:"p"},"Camera"),"."),Object(r.b)("p",null,"We start by including the ",Object(r.b)("inlineCode",{parentName:"p"},"Camera")," namespaces."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cs"}),"using MonoGame.Extended;\nusing MonoGame.Extended.ViewportAdapters;\n")),Object(r.b)("p",null,"Next, we define our Camera"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cs"}),"private OrthographicCamera _camera;\n")),Object(r.b)("p",null,"Which we then initialize in the Initialize function."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cs"}),"protected override void Initialize()\n{\n    var viewportadapter = new BoxingViewportAdapter(Window, GraphicsDevice, 800, 600);\n    _camera = new OrthographicCamera(viewportadapter);\n}\n")),Object(r.b)("p",null,"We need to tell the Camera where to look. To do this, we declare the following field."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cs"}),"private Vector2 _cameraPosition;\n")),Object(r.b)("p",null,"We update this field with the following function."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cs"}),"private Vector2 GetMovementDirection()\n{\n    var movementDirection = Vector2.Zero;\n    var state = Keyboard.GetState();\n    if (state.IsKeyDown(Keys.Down))\n    {\n        movementDirection -= Vector2.UnitY;\n    }\n    if (state.IsKeyDown(Keys.Up))\n    {\n        movementDirection += Vector2.UnitY;\n    }\n    if (state.IsKeyDown(Keys.Left))\n    {\n        movementDirection -= Vector2.UnitX;\n    }\n    if (state.IsKeyDown(Keys.Right))\n    {\n        movementDirection += Vector2.UnitX;\n    }\n    movementDirection.Normalize(); \n\n    return movementDirection;\n}\n\nprivate void MoveCamera(GameTime gameTime)\n{\n    var speed = 200;\n    var seconds = gameTime.GetElapsedSeconds();\n    var movementDirection = GetMovementDirection();\n    _cameraPosition += speed * movementDirection * seconds;\n}\n")),Object(r.b)("p",null,"Which we then use in the ",Object(r.b)("inlineCode",{parentName:"p"},"Update")," function."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cs"}),"protected override void Update(GameTime gameTime)\n{\n    _tiledMapRenderer.Update(gameTime);\n\n    MoveCamera(gameTime);\n    _camera.LookAt(_cameraPosition);\n\n    base.Update(gameTime);\n}\n")),Object(r.b)("p",null,"To render the map with our ",Object(r.b)("inlineCode",{parentName:"p"},"Camera"),", we call the Draw function with the Camera's ",Object(r.b)("inlineCode",{parentName:"p"},"ViewMatrix")," as follows."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cs"}),"protected override void Draw(GameTime gameTime)\n{\n    GraphicsDevice.Clear(Color.Black);\n\n    _tiledMapRenderer.Draw(_camera.GetViewMatrix());\n}\n")))}p.isMDXComponent=!0}}]);