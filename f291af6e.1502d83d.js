(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{117:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/inEasing-78ec3d95639b9794e13cdfba1abd1c2a.gif"},118:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/outEasing-bac72e087112c36f50f2226499901a5a.gif"},119:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/inOutEasing-0f15ed16a902cdfe8dce4df673120b8c.gif"},72:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return r})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return u}));var a=t(2),i=t(6),s=(t(0),t(80)),o={id:"tweening",title:"Tweening",sidebar_label:"Tweening"},r={unversionedId:"features/tweening/tweening",id:"features/tweening/tweening",isDocsHomePage:!1,title:"Tweening",description:"Inbetweening, or just tweening for short, allows you to generate values for position, size, color, opacity, etc in intermediate frames giving the illusion of animation.",source:"@site/docs/features/tweening/tweening.md",slug:"/features/tweening/tweening",permalink:"/docs/features/tweening/tweening",editUrl:"https://github.com/craftworkgames/craftworkgames.github.io/tree/develop/docs/features/tweening/tweening.md",version:"current",sidebar_label:"Tweening",sidebar:"docs",previous:{title:"Installation",permalink:"/docs/getting-started/installation"},next:{title:"Tiled",permalink:"/docs/features/tiled/tiled"}},c=[{value:"Installation",id:"installation",children:[]},{value:"Example",id:"example",children:[{value:"Usage",id:"usage",children:[]}]},{value:"Easing functions",id:"easing-functions",children:[{value:"In-Easing functions",id:"in-easing-functions",children:[]},{value:"Out-Easing functions",id:"out-easing-functions",children:[]},{value:"In-Out-Easing functions",id:"in-out-easing-functions",children:[]}]}],l={rightToc:c};function u(e){var n=e.components,o=Object(i.a)(e,["components"]);return Object(s.b)("wrapper",Object(a.a)({},l,o,{components:n,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Inbetweening, or just tweening for short, allows you to generate values for position, size, color, opacity, etc in intermediate frames giving the illusion of animation."),Object(s.b)("h2",{id:"installation"},"Installation"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"MonoGame.Extended.Tweening")," is distributed via NuGet packages. You can add the NuGet package to your C# project through your IDE of choice (Visual Studio, Xamarin Studio, Rider, etc) or through the Command Line Interface (CLI) using the dotnet command."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"dotnet add package MonoGame.Extended.Tweening\n")),Object(s.b)("h2",{id:"example"},"Example"),Object(s.b)("p",null,"The assets used in the example don't have any unique assets to download."),Object(s.b)("h3",{id:"usage"},"Usage"),Object(s.b)("p",null,"We start by including the ",Object(s.b)("inlineCode",{parentName:"p"},"Tweening")," namespace."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-csharp"}),"using MonoGame.Extended.Tweening;\n")),Object(s.b)("p",null,"Next, we declare a class with a property we want to tween."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-csharp"}),"class Player\n{\n    public Vector2 Position { get; set; }\n}\n")),Object(s.b)("p",null,"Next, we instantiate an instance of the Tweener and our class."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-csharp"}),"private readonly Tweener _tweener = new Tweener();\nprivate readonly Player _player = new Player() { Position = new Vector2(200, 50) };\n")),Object(s.b)("p",null,"Then we order the ",Object(s.b)("inlineCode",{parentName:"p"},"Tweener")," to tween the position.\nThe Tween method requires a target object and an expression that refers to a property of that object."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-csharp"}),"_tweener.TweenTo(target: _player, expression: player => _player.Position, toValue: new Vector2(550, 50), duration: 2, delay: 1)\n                .RepeatForever(repeatDelay: 0.2f)\n                .AutoReverse()\n                .Easing(EasingFunctions.Linear);\n")),Object(s.b)("p",null,"Next, we add the ",Object(s.b)("inlineCode",{parentName:"p"},"Tweener")," to the update loop,"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-csharp"}),"protected override void Update(GameTime gameTime)\n{\n    _tweener.Update(gameTime.GetElapsedSeconds());\n    base.Update(gameTime);\n}\n")),Object(s.b)("p",null,"And last but not least we draw."),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-csharp"}),"protected override void Draw(GameTime gameTime)\n{\n    GraphicsDevice.Clear(Color.Black);\n    _spriteBatch.Begin(samplerState: SamplerState.PointClamp);\n    _spriteBatch.FillRectangle(_player.Position.X, _player.Position.Y, Size.X, Size.Y, Color.Red);\n    _spriteBatch.End();\n}\n")),Object(s.b)("h2",{id:"easing-functions"},"Easing functions"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"EasingFunctions")," calculate a value given a percentage of completeness.\nIn the example ",Object(s.b)("inlineCode",{parentName:"p"},"EasingFunctions.Linear")," was used. Below is a visual representation of the other ",Object(s.b)("inlineCode",{parentName:"p"},"EasingFunctions")),Object(s.b)("h3",{id:"in-easing-functions"},"In-Easing functions"),Object(s.b)("p",null,Object(s.b)("img",{alt:"In-Easing functions",src:t(117).default})),Object(s.b)("h3",{id:"out-easing-functions"},"Out-Easing functions"),Object(s.b)("p",null,Object(s.b)("img",{alt:"Out-Easing functions",src:t(118).default})),Object(s.b)("h3",{id:"in-out-easing-functions"},"In-Out-Easing functions"),Object(s.b)("p",null,Object(s.b)("img",{alt:"In-Out-Easing functions",src:t(119).default})))}u.isMDXComponent=!0}}]);